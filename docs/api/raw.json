{"majorversion": 3, "filemap": {"magix.js": {"classlist": ["Magix.History"], "name": "magix.js", "module": "helper"}, "vcelement.js": {"classlist": ["libs.magix.Vcelement"], "name": "vcelement.js", "module": "mu"}, "mu.js": {"classlist": ["libs.magix.Mu"], "name": "mu.js", "module": "magix"}, "view.js": {"classlist": ["libs.magix.View"], "name": "view.js", "module": "vcelement"}, "controller.js": {"classlist": ["libs.magix.Controller"], "name": "controller.js", "module": "controller"}, "helper.js": {"classlist": ["libs.magix.Helper"], "name": "helper.js", "module": "controller"}, "vom.js": {"classlist": ["libs.magix.Vom"], "name": "vom.js", "module": "view"}}, "modules": {"helper": {"description": "通用方法", "submodules": [], "classlist": ["libs.magix.Helper"], "filelist": ["magix.js"], "subdata": {}, "requires": "jquery,libs/magix/controller", "name": "helper"}, "vom": {"description": "VOM(View Object Model)  管理vcelement", "submodules": [], "classlist": ["libs.magix.Vom"], "filelist": [], "subdata": {}, "requires": "underscore,backbone,libs/magix/vcelement", "name": "vom"}, "vcelement": {"description": "Magix ViewContainer节点元素", "submodules": [], "classlist": ["libs.magix.Vcelement"], "require": ".asynces libs/magix/vom", "filelist": ["view.js"], "subdata": {}, "requires": "underscore,backbone,libs/magix/controller", "name": "vcelement"}, "mu": {"description": "Magix扩展的Mustache", "submodules": [], "classlist": ["libs.magix.Mu"], "require": "mustache", "filelist": ["vcelement.js"], "subdata": {}, "name": "mu"}, "controller": {"description": "Controller负责按照规则将hash值Route至指定的View.", "submodules": [], "classlist": ["libs.magix.Controller"], "filelist": ["controller.js", "helper.js"], "subdata": {}, "requires": "backbone,undersocre,app/config/ini", "name": "controller"}, "magix": {"description": "开始建立一个Magix应用:<br/>\r\n1.简历libs目录,放置libs/seajs,libs/magix相关文件<br/>\r\n2.建立index.html.<br/>\r\n3.建立名为mxhistory.html的空白html文件,与index.html放置在同一目录下.<br/>\r\n4.建立app,app/views,app/config目录,和app/config/ini.js文件.<br/>\r\n5.在index.html中先后引入seajs.js和magix.js<br/>\r\n6.通过seajs.config(alieas{libs:\"path/to/libs\",app:\"path/to/app\"});指定libs和app的实际地址.<br/>\r\n7.添加启动Maigx历史服务:Magix.History.init();<br/>\r\n8.参照ini_sample.js填写app/config/ini.js文件,主要填写首页和404页面地址,以及配置pathname对应的viewname.<br/>\r\nTODO:创建应用详情链接", "submodules": [], "classlist": ["Magix.History"], "filelist": ["mu.js"], "subdata": {}, "name": "magix"}, "view": {"description": "Magix View 模块", "submodules": [], "classlist": ["libs.magix.View"], "filelist": ["vom.js"], "subdata": {}, "requires": "backbone,underscore,libs/magix/vom,libs.magix/controller,libs/magix/helper,libs/magix/mu", "name": "view"}}, "classmap": {"libs.magix.Controller": {"name": "libs.magix.Controller", "namespace": "libs.magix", "module": "controller", "methods": {"navigateTo": {"params": [{"type": "Object", "name": "queryString", "description": ""}], "description": "将传入的queryString Merge到当前的hashQuery中,生成新的query.<br/>\r\n原hash: #!/a/b/x=1&y=2&offset=20<br/>\r\nreqiure(\"libs/magix/controller\").navigateTo(\"z=1&offset=0\");<br/>\r\n新hash: #!/a/b/x=1&y=2&z=3&offset=0<br/>", "guessedname": "navigateTo", "guessedtype": "function"}, "param": {"return": {"type": "String", "description": ""}, "params": [{"type": "Object", "name": "queryObject", "description": ""}], "description": "将传入的queryObject转化为key1=value1&key2=value2的queryString", "guessedname": "param", "guessedtype": "function"}, "unParam": {"return": {"type": "Object", "description": ""}, "params": [{"type": "String", "name": "queryString", "description": ""}], "description": "与param方法的相反,将传入的queryString转化为Object", "guessedname": "unParam", "guessedtype": "function"}}, "static": "", "file": "controller.js", "shortname": "Controller", "properties": {"queryModel": {"type": "Backbone.Model", "description": "查询对象,包含query,pathname,referrer,postData和hash包含的众多参数<br/>\r\n这是一个Backbone.Model对象实例,可以通过监听该对象的change事件,监视url的变化.<br/>\r\nhash解析规则,\"#!/a/b/x=1&y=2&z=3\" 等同于 \"#/a/b/x=1&y=2&z=3\",将被解析为:<br/>\r\n{<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;referrer:null,<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;postdata:null,<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;pathname:\"/a/b\",<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;query:\"/a/b/x=1&y=2&z=3\",<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;x:\"1\",<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;y:\"2\",<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;z:\"3\"<br/>\r\n}", "guessedname": "_mountView", "guessedtype": "function"}, "env": {"type": "Object", "description": "存储全局共享信息,<br/>\r\n如require(\"libs/magix/controller\").env.templates存储模板", "guessedname": "env", "guessedtype": "property"}}, "description": "Controller负责按照规则将hash值Route至指定的View."}, "libs.magix.View": {"name": "libs.magix.View", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " config其中必须包含viewName,vcid和queryModel三项,指明view的名字,展示view的容器id和当前的query"}], "description": "Magix View基类.继承自Backbone.View.用于管理View声明周期,事件代理,渲染数据,以及响应Hash变化.<br/>\r\nMagixView子类位于app/views目录之下,通过重写init,render,queryModelChange,renderer,events来扩展出具体子类,如:<br/>\r\ndefine(function(){<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;require(\"libs/magix/view\").extend({init:...,render:...});<br/>\r\n}<br/>\r\n通常不会直接通过new View(config)来创建类的实例,而是通过vcElement.mountView(\"viewName\")的方式将view装载入一个容器(<a href=\"module_vcelement.html\">vcelement</a>)时进行实例化."}], "namespace": "libs.magix", "module": "view", "methods": {"init": {"description": "实例化过程会调用init方法,在这个方法中可以完成一些初始化任务,比如载入将要使用的Model/Collection对象", "guessedname": "initialize", "guessedtype": "function"}, "queryModelChange": {"return": {"type": "Boolean|Array", "description": ""}, "description": "query发生变化事件响应函数,基类中是个空方法,各子类在需要时实现这个方法<br/>\r\n注意,并非query发生变化一定会触发这个方法,需要由父View决定是否将change事件下发给子View.<br/>\r\n相应的return true将会下发change事件给子view,false反之,return vcid数组,将事件传递给指定的子View.", "guessedname": "queryModelChange", "guessedtype": "function"}, "render": {"description": "view渲染方法,各子类可以覆盖<br/>\r\n默认会将query交给同名的模板文件,渲染至vcelement内.", "guessedname": "render", "guessedtype": "function"}, "setData": {"description": "设置数据到this.data,内部会自动把renderer附加到data中<br/>\r\nmustahce.tohtml(template,this.setData({list:...}));", "guessedname": "setData", "guessedtype": "function"}}, "file": "view.js", "shortname": "View", "properties": {"renderer": {"description": "为复杂数据渲染构建renderer<br/>\r\nTODO:细化方法使用", "guessedname": "setRenderer", "guessedtype": "function"}, "events": {"description": "所有事件处理函数\r\nTODO:细化方法使用", "guessedname": "delegateEvents", "guessedtype": "function"}}, "description": "Magix View基类.继承自Backbone.View.用于管理View声明周期,事件代理,渲染数据,以及响应Hash变化.<br/>\r\nMagixView子类位于app/views目录之下,通过重写init,render,queryModelChange,renderer,events来扩展出具体子类,如:<br/>\r\ndefine(function(){<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;require(\"libs/magix/view\").extend({init:...,render:...});<br/>\r\n}<br/>\r\n通常不会直接通过new View(config)来创建类的实例,而是通过vcElement.mountView(\"viewName\")的方式将view装载入一个容器(<a href=\"module_vcelement.html\">vcelement</a>)时进行实例化."}, "Magix.History": {"name": "Magix.History", "namespace": "Magix", "module": "magix", "methods": {"init": {"params": [{"type": "String", "name": "iframeSrc", "description": " (可选,默认为\"mxhistory.html\") 用于IE6/7记录历史的iframe地址,注意需要填写相对于主页的相对路径."}], "description": "Magix应用程序入口 启动History服务", "guessedname": "init", "guessedtype": "function"}}, "static": "", "file": "magix.js", "shortname": "History", "description": "Magix History 服务,为使基于Magix的Ajax应用能够在各种浏览器中都能够正常使用其\"前进\",\"后退\"功能<br/>\r\n因为Backbone.History在IE6/7下存在<a href=\"https://github.com/documentcloud/backbone/issues/228\" target=\"_blank\">bug</a>,所以Maigx重写了这部分代码<br/>\r\n因为这部分代码中包含document.write.所以无法封装为seajs模块使用.且必须将magix.js通过外联方式&lt;script src='magix.js'>&lt;/script>节点直接引入页面."}, "libs.magix.Helper": {"name": "libs.magix.Helper", "namespace": "libs.magix", "module": "helper", "methods": {"getTemplate": {"params": [{"type": "String", "name": "uri", "description": " 模板地址"}, {"type": "Function", "name": "cb", "description": " 获取模板后回调,回调函数将接收到一个参数为模板字符串"}], "description": "获取模板后回调", "guessedname": "getTemplate", "guessedtype": "function"}}, "static": "", "file": "helper.js", "shortname": "Helper", "description": "通用方法静态类"}, "libs.magix.Mu": {"name": "libs.magix.Mu", "namespace": "libs.magix", "module": "mu", "methods": {"to_html": {"return": {"type": "String", "description": ""}, "params": [{"type": "String", "name": "template", "description": " 模板字符串"}, {"type": "Object", "name": "data", "description": " 数据Object"}], "description": "输出模板和数据,返回渲染后结果字符串,接口与Mustache完全一致", "guessedname": "to_html", "guessedtype": "function"}}, "static": "", "file": "mu.js", "shortname": "Mu", "description": "扩展的Mustache类<br/>\r\n支持简单的条件判断 如:\r\n<pre>\r\n{{#list}}\r\n&nbsp;&nbsp;&nbsp;&nbsp;{{#if(status==P)}}ID:{{id}},status:&lt;b style='color:green'>通过&lt;/b>{{/if(status==P)}}\r\n&nbsp;&nbsp;&nbsp;&nbsp;{{#if(status==W)}}ID:{{id}},status:等待{{/if(status==W)}}\r\n&nbsp;&nbsp;&nbsp;&nbsp;{{#if(status==R)}}ID:{{id}},status&lt;b style='color:red'>拒绝&lt;/b>{{/if(status==R)}}\r\n{{/list}}\r\n</pre>\r\n对于数组对象可以通过{{__index__}}访问数组下标"}, "libs.magix.Vcelement": {"name": "libs.magix.Vcelement", "constructors": [{"params": [{"type": "HTMLElement", "name": "node", "description": " (可选)View根节点"}, {"type": "String", "name": "id", "description": " (可选)View根节点id"}], "description": "ViewContainer节点元素,对应一个HTMLElement,可以通过mount,unMount将Magix View渲染至这个节点内."}], "namespace": "libs.magix", "module": "vcelement", "methods": {"getOnce": {"return": {"type": "Element", "description": "返回节点"}, "description": "从vcelement中得到vc对应元素节点,并将节点释放<br/>", "guessedname": "getOnce", "guessedtype": "function"}, "appendChild": {"params": [], "description": "将传入vcelement,追加到本vcelement的childNodes中<br/>", "guessedname": "appendChild", "guessedtype": "function"}, "removeNode": {"description": "销毁自身vcelement,首先卸载view,然后从dom中移出自身节点,从vom中移出自身并销毁<br/>", "guessedname": "removeNode", "guessedtype": "function"}, "freeNode": {"description": "释放vcelement中的节点引用<br/>", "guessedname": "freeNode", "guessedtype": "function"}, "getAttribute": {"return": {"type": "String", "description": "属性值"}, "description": "获取mxvc元素上的属性值<br/>", "param": "{String} k 属性名称", "params": [{"type": "String", "name": "s", "description": " 属性名称"}], "guessedname": "getAttribute", "guessedtype": "function"}, "unmountView": {"description": "从Vclement中卸载view,出发vclement.unload事件,清除内部节点,注销vc上的事件,改变mounted状态<br/>", "guessedname": "unmountView", "guessedtype": "function"}, "idIt": {"params": [{"type": "Element", "name": "节点", "description": ""}, {"type": "id", "name": "id", "description": ""}], "description": "为dom元素增加唯一id<br/>", "guessedname": "idIt", "guessedtype": "function"}, "removeChild": {"description": "销毁某个子Vcelment<br/>", "guessedname": "removeChild", "guessedtype": "function"}, "mountView": {"return": {"type": "Element", "description": "返回节点"}, "params": [{"type": "String", "name": "viewName", "description": " view名称"}, {"type": "Object", "name": "options", "description": " view配置信息"}], "description": "装载view<br/>", "guessedname": "mountView", "guessedtype": "function"}, "getElements": {"return": {"type": "Array", "description": ""}, "description": "获取当前mxvc下所有子mxvc节点集合<br/>", "guessedname": "getElements", "guessedtype": "function"}}, "file": "vcelement.js", "shortname": "Vcelement", "properties": {"view": {"type": "Object", "description": "容器中的view<br/>", "guessedname": "view", "guessedtype": "property"}}, "description": "ViewContainer节点元素,对应一个HTMLElement,可以通过mount,unMount将Magix View渲染至这个节点内."}, "libs.magix.Vom": {"name": "libs.magix.Vom", "namespace": "libs.magix", "module": "vom", "static": "", "file": "vom.js", "shortname": "Vom", "properties": {"root": {"type": "Vcelement", "description": "root vcelement对象,最外层view容器元素<br/>", "guessedname": "root", "guessedtype": "property"}, "_idMap": {"type": "Object", "description": "_idMap 所有vcelment的索引<br/>", "guessedname": "_idMap", "guessedtype": "property"}}, "methods": {"push": {"params": [{"type": "Vcelement", "name": "vc", "description": ""}], "description": "将Vcelement加入_idMap索引", "guessedname": "push", "guessedtype": "function"}, "init": {"params": [{"type": "Object", "name": "queryString", "description": ""}], "description": "vom初始化,创建vom.root,插入到dom中.<br/>", "guessedname": "init", "guessedtype": "function"}, "getElementById": {"return": {"type": "", "description": "Vcelement"}, "params": [{"type": "string", "name": "vc", "description": " id"}], "description": "根据id获取vcelement对象", "guessedname": "getElementById", "guessedtype": "function"}, "pop": {"return": "Vcelement", "description": "将Vcelement移出_idMap索引", "param": "{element|string} ele", "params": [{"type": "Vcelement", "name": "vc", "description": ""}], "guessedname": "pop", "guessedtype": "function"}}}}, "version": "0.2.0", "namespaces": ["libs.magix", "Magix"]}